#!/usr/bin/python3

# Строки и форматирование

# Задание 1
# Входные данные
# Дана строка.
some_string = "This is a test string!"
# Выходные данные
# • Сначала выведите третий символ этой строки.
print(some_string[2])
# • Во второй строке выведите предпоследний символ этой строки.
print(some_string[-2])
# • В третьей строке выведите первые пять символов этой строки.
print(some_string[:5])
# • В четвертой строке выведите всю строку, кроме последних двух символов.
print(some_string[:-2])
# • В пятой строке выведите все символы с четными индексами (считая, что
# индексация начинается с 0, поэтому символы выводятся начиная с первого).
print(some_string[::2])
# • В шестой строке выведите все символы с нечетными индексами, то
# есть начиная со второго символа строки.
print(some_string[1::2])
# • В седьмой строке выведите все символы в обратном порядке.
print(some_string[::-1])
# • В восьмой строке выведите все символы строки через один в
# обратном порядке, начиная с последнего.
print(some_string[::-2])
# • В девятой строке выведите длину данной строки.
print(len(some_string))

# Задание 2:
# Напишите функцию search_substr(subst, st), которая принимает 2
# строки и определяет, имеется ли подстрока subst в строке st. В случае
# нахождения подстроки, возвращается фраза «Есть контакт!», а иначе
# «Мимо!». Должно быть найдено совпадение независимо от регистра обеих строк.

def search_substr(subst, st):
    if subst.upper() in st.upper():
        return 'Есть контакт'
    else:
        return 'Мимо!'

print(search_substr('тЕст', 'ТЕсто'))

# Задание 3:
# Требуется определить индексы первого и последнего вхождения
# буквы в строке. Для этого нужно написать функцию first_last(letter, st),
# включающую 2 параметра: letter – искомый символ, st – целевая строка.
# В случае отсутствия буквы в строке, нужно вернуть кортеж (None, None),
# если же она есть, то кортеж будет состоять из первого и последнего
# индекса этого символа.

def first_last(letter, st):
    if st.count(letter)==0:
        return (None,None)
    return (st.find(letter),st.rfind(letter))

print(first_last('a','Sonata'))

# Задание 4:
# На основании предоставленного отрывка текста определить 3
# наиболее часто встречаемых символа в ней. Пробелы нужно
# игнорировать (не учитывать при подсчете). Для выведения результатов
# вычислений требуется написать функцию top3(st). Итог работы функции
# представить в виде строки: «символ – количество раз, символ –
# количество раз…».

def top3(st):
    uniq = set(filter(lambda x: x.isalpha(),st.lower()))
    freq = {}
    for i in uniq:
        freq[i]=st.count(i)
    for i in range(3):
        sym=max(freq, key=freq.get)
        print(f'Топ {i+1}: символ {sym} - {freq[sym]}')
        freq.pop(sym)

st = "My mistress' eyes are nothing like the sun; \
    Coral is far more red, than her lips red: \
    If snow be white, why then her breasts are dun; \
    If hairs be wires, black wires grow on her head."
top3(st)

# Задание 5:
# Дан текст, произвольный длины, необходимо вывести слова текста в
# отсортированном алфавитном порядке. Например текст «Это пример сроки»,
# результат работы программы:
# пример
# строки
# это

def sort_words(text):
    words = sorted(text.split())
    for w in words:
        print(w)

text = 'это пример строки'
sort_words(text)
